From zxombie at users.berlios.de  Wed Aug 29 03:03:00 2007
From: zxombie at users.berlios.de (zxombie at users.berlios.de)
Date: Wed, 29 Aug 2007 03:03:00 +0200
Subject: r6 - trunk/lib/test
Message-ID: <200708290103.l7T130TZ008394@sheep.berlios.de>

Author: zxombie
Date: 2007-08-29 03:02:42 +0200 (Wed, 29 Aug 2007)
New Revision: 6

Modified:
   trunk/lib/test/test_facund_object.c
Log:
Update the tests for bool, int and uint

Modified: trunk/lib/test/test_facund_object.c
===================================================================
--- trunk/lib/test/test_facund_object.c	2007-08-27 11:21:08 UTC (rev 5)
+++ trunk/lib/test/test_facund_object.c	2007-08-29 01:02:42 UTC (rev 6)
@@ -31,6 +31,17 @@
 
 #include <string.h>
 
+#define test_is_not_type(realtype, testtype, value, errvalue) do { \
+	struct facund_object *newobj; \
+	fail_unless((newobj = facund_object_new_##realtype()) != NULL, NULL); \
+		facund_object_set_##realtype(newobj, value); \
+		fail_unless(facund_object_get_##testtype(newobj) == errvalue, \
+		    NULL); \
+		fail_unless(facund_object_get_error(newobj) == \
+		    FACUND_OBJECT_ERROR_WRONG_TYPE, NULL); \
+	facund_object_free(newobj); \
+} while(0)
+
 /*
  * Tests for a boolean facund_object
  */
@@ -161,6 +172,15 @@
 	    "<data type=\"bool\">false</data>") == 0, NULL);
 
 	facund_object_free(obj);
+
+	fail_unless((obj = facund_object_new_bool()) != NULL, NULL);
+
+	fail_unless(facund_object_set_from_str(obj, "string") == 0, NULL);
+	fail_unless(facund_object_get_bool(obj) == 0, NULL);
+	fail_unless(strcmp(facund_object_xml_string(obj),
+	    "<data type=\"bool\">false</data>") == 0, NULL);
+
+	facund_object_free(obj);
 }
 END_TEST
 
@@ -185,31 +205,13 @@
 
 	facund_object_free(obj);
 
-
 	/* These should fail as they are the wrong types */
-	fail_unless((obj = facund_object_new_bool()) != NULL, NULL);
-		facund_object_set_bool(obj, 0);
-		fail_unless(facund_object_get_int(obj) == 0, NULL);
-		fail_unless(facund_object_get_error(obj) ==
-		    FACUND_OBJECT_ERROR_WRONG_TYPE, NULL);
-	facund_object_free(obj);
+	test_is_not_type(bool, int, 0, 0);
+	test_is_not_type(bool, uint, 0, 0);
+	test_is_not_type(bool, string, 0, 0);
 
 	fail_unless((obj = facund_object_new_bool()) != NULL, NULL);
 		facund_object_set_bool(obj, 0);
-		fail_unless(facund_object_get_uint(obj) == 0, NULL);
-		fail_unless(facund_object_get_error(obj) ==
-		    FACUND_OBJECT_ERROR_WRONG_TYPE, NULL);
-	facund_object_free(obj);
-
-	fail_unless((obj = facund_object_new_bool()) != NULL, NULL);
-		facund_object_set_bool(obj, 0);
-		fail_unless(facund_object_get_string(obj) == NULL), NULL;
-		fail_unless(facund_object_get_error(obj) ==
-		    FACUND_OBJECT_ERROR_WRONG_TYPE, NULL);
-	facund_object_free(obj);
-
-	fail_unless((obj = facund_object_new_bool()) != NULL, NULL);
-		facund_object_set_bool(obj, 0);
 		fail_unless(facund_object_get_array_item(obj, 0) == NULL, NULL);
 		fail_unless(facund_object_get_error(obj) ==
 		    FACUND_OBJECT_ERROR_WRONG_TYPE, NULL);
@@ -222,7 +224,7 @@
  */
 START_TEST(pkg_freebsd_object_int_null)
 {
-	/* Test if bool functions will fail correctly when passes NULL */
+	/* Test if int functions will fail correctly when passes NULL */
 	fail_unless(facund_object_set_int(NULL, -1) == -1, NULL);
 	fail_unless(facund_object_set_int(NULL, 0) == -1, NULL);
 	fail_unless(facund_object_set_int(NULL, 1) == -1, NULL);
@@ -246,12 +248,206 @@
 }
 END_TEST
 
+START_TEST(pkg_freebsd_object_int_zero)
+{
+	struct facund_object *obj;
+
+	/* Test accessing an object set to 0 will succeed */
+	fail_unless((obj = facund_object_new_int()) != NULL, NULL);
+
+	fail_unless(facund_object_set_int(obj, 0) == 0, NULL);
+	fail_unless(facund_object_get_int(obj) == 0, NULL);
+	fail_unless(strcmp(facund_object_xml_string(obj),
+	    "<data type=\"int\">0</data>") == 0, NULL);
+
+	facund_object_free(obj);
+}
+END_TEST
+
+START_TEST(pkg_freebsd_object_int_zero_from_str)
+{
+	struct facund_object *obj;
+
+	/* Test accessing an object set to 0 from a string will succeed */
+	fail_unless((obj = facund_object_new_int()) != NULL, NULL);
+
+	fail_unless(facund_object_set_from_str(obj, "0") == 0, NULL);
+	fail_unless(facund_object_get_int(obj) == 0, NULL);
+	fail_unless(strcmp(facund_object_xml_string(obj),
+	    "<data type=\"int\">0</data>") == 0, NULL);
+
+	facund_object_free(obj);
+}
+END_TEST
+
+START_TEST(pkg_freebsd_object_int_min)
+{
+	struct facund_object *obj;
+
+	/* Test accessing an object set to -2147483648 will succeed */
+	fail_unless((obj = facund_object_new_int()) != NULL, NULL);
+
+	fail_unless(facund_object_set_int(obj, INT32_MIN) == 0, NULL);
+	fail_unless(facund_object_get_int(obj) == INT32_MIN, NULL);
+	fail_unless(strcmp(facund_object_xml_string(obj),
+	    "<data type=\"int\">-2147483648</data>") == 0, NULL);
+
+	facund_object_free(obj);
+}
+END_TEST
+
+START_TEST(pkg_freebsd_object_int_min_from_str)
+{
+	struct facund_object *obj;
+
+	/*
+	 * Test accessing an object set to
+	 * -2147483648 from a string will succeed
+	 */
+	fail_unless((obj = facund_object_new_int()) != NULL, NULL);
+
+	fail_unless(facund_object_set_from_str(obj, "-2147483648") == 0, NULL);
+	fail_unless(facund_object_get_int(obj) == INT32_MIN, NULL);
+	fail_unless(strcmp(facund_object_xml_string(obj),
+	    "<data type=\"int\">-2147483648</data>") == 0, NULL);
+
+	facund_object_free(obj);
+}
+END_TEST
+
+START_TEST(pkg_freebsd_object_int_bad_min_from_str)
+{
+	struct facund_object *obj;
+
+	/* Test setting an object to a number too small will fail */
+	fail_unless((obj = facund_object_new_int()) != NULL, NULL);
+
+	fail_unless(facund_object_set_from_str(obj, "-2147483649") == -1, NULL);
+	fail_unless(facund_object_get_error(obj) ==
+	    FACUND_OBJECT_ERROR_BADSTRING, NULL);
+	fail_unless(facund_object_get_int(obj) == 0, NULL);
+	fail_unless(facund_object_get_error(obj) ==
+	    FACUND_OBJECT_ERROR_UNASSIGNED, NULL);
+	fail_unless(facund_object_xml_string(obj) == NULL, NULL);
+
+	facund_object_free(obj);
+}
+END_TEST
+
+START_TEST(pkg_freebsd_object_int_max)
+{
+	struct facund_object *obj;
+
+	/* Test accessing an object set to 2147483647 will succeed */
+	fail_unless((obj = facund_object_new_int()) != NULL, NULL);
+
+	fail_unless(facund_object_set_int(obj, INT32_MAX) == 0, NULL);
+	fail_unless(facund_object_get_int(obj) == INT32_MAX, NULL);
+	fail_unless(strcmp(facund_object_xml_string(obj),
+	    "<data type=\"int\">2147483647</data>") == 0, NULL);
+
+	facund_object_free(obj);
+}
+END_TEST
+
+START_TEST(pkg_freebsd_object_int_max_from_str)
+{
+	struct facund_object *obj;
+
+	/*
+	 * Test accessing an object set to
+	 * 2147483647 from a string will succeed
+	 */
+	fail_unless((obj = facund_object_new_int()) != NULL, NULL);
+
+	fail_unless(facund_object_set_from_str(obj, "2147483647") == 0, NULL);
+	fail_unless(facund_object_get_int(obj) == INT32_MAX, NULL);
+	fail_unless(strcmp(facund_object_xml_string(obj),
+	    "<data type=\"int\">2147483647</data>") == 0, NULL);
+
+	facund_object_free(obj);
+}
+END_TEST
+
+START_TEST(pkg_freebsd_object_int_bad_max_from_str)
+{
+	struct facund_object *obj;
+
+	/* Test setting an object to a number too large will fail */
+	fail_unless((obj = facund_object_new_int()) != NULL, NULL);
+
+	fail_unless(facund_object_set_from_str(obj, "2147483648") == -1, NULL);
+	fail_unless(facund_object_get_error(obj) ==
+	    FACUND_OBJECT_ERROR_BADSTRING, NULL);
+	fail_unless(facund_object_get_int(obj) == 0, NULL);
+	fail_unless(facund_object_get_error(obj) ==
+	    FACUND_OBJECT_ERROR_UNASSIGNED, NULL);
+	fail_unless(facund_object_xml_string(obj) == NULL, NULL);
+
+	facund_object_free(obj);
+}
+END_TEST
+
+START_TEST(pkg_freebsd_object_int_bad_from_str)
+{
+	struct facund_object *obj;
+
+	/* Test setting an object to a bas string will fail */
+	fail_unless((obj = facund_object_new_int()) != NULL, NULL);
+
+	fail_unless(facund_object_set_from_str(obj, "1 f1234") == -1, NULL);
+	fail_unless(facund_object_get_error(obj) ==
+	    FACUND_OBJECT_ERROR_BADSTRING, NULL);
+	fail_unless(facund_object_get_int(obj) == 0, NULL);
+	fail_unless(facund_object_get_error(obj) ==
+	    FACUND_OBJECT_ERROR_UNASSIGNED, NULL);
+	fail_unless(facund_object_xml_string(obj) == NULL, NULL);
+
+	facund_object_free(obj);
+}
+END_TEST
+
+START_TEST(pkg_freebsd_object_int_error)
+{
+	struct facund_object *obj;
+
+	/* Test errors are set/reset correctly */
+	fail_unless((obj = facund_object_new_int()) != NULL, NULL);
+	fail_unless(facund_object_get_error(obj) == FACUND_OBJECT_ERROR_NONE,
+	    NULL);
+
+	/* This should cause an error flag to be set */
+	facund_object_get_int(obj);
+	fail_unless(facund_object_get_error(obj) ==
+	    FACUND_OBJECT_ERROR_UNASSIGNED, NULL);
+
+	/* This should reset the error flag */
+	facund_object_set_int(obj, 0);
+	fail_unless(facund_object_get_error(obj) == FACUND_OBJECT_ERROR_NONE,
+	    NULL);
+
+	facund_object_free(obj);
+
+	/* These should fail as they are the wrong types */
+	test_is_not_type(int, bool, 0, -1);
+	test_is_not_type(int, uint, 0, 0);
+	test_is_not_type(int, string, 0, 0);
+
+	fail_unless((obj = facund_object_new_int()) != NULL, NULL);
+		facund_object_set_int(obj, 0);
+		fail_unless(facund_object_get_array_item(obj, 0) == NULL, NULL);
+		fail_unless(facund_object_get_error(obj) ==
+		    FACUND_OBJECT_ERROR_WRONG_TYPE, NULL);
+	facund_object_free(obj);
+}
+END_TEST
+
 /*
  * Tests for an unsigned integer facund_object
  */
 START_TEST(pkg_freebsd_object_uint_null)
 {
-	/* Test if bool functions will fail correctly when passes NULL */
+	/* Test if uint functions will fail correctly when passes NULL */
 	fail_unless(facund_object_set_uint(NULL, 0) == -1, NULL);
 	fail_unless(facund_object_set_uint(NULL, 1) == -1, NULL);
 	fail_unless(facund_object_get_uint(NULL) == 0, NULL);
@@ -274,12 +470,171 @@
 }
 END_TEST
 
+START_TEST(pkg_freebsd_object_uint_min)
+{
+	struct facund_object *obj;
+
+	/* Test accessing an object set to 0 will succeed */
+	fail_unless((obj = facund_object_new_uint()) != NULL, NULL);
+
+	fail_unless(facund_object_set_uint(obj, 0) == 0, NULL);
+	fail_unless(facund_object_get_uint(obj) == 0, NULL);
+	fail_unless(strcmp(facund_object_xml_string(obj),
+	    "<data type=\"unsigned int\">0</data>") == 0, NULL);
+
+	facund_object_free(obj);
+}
+END_TEST
+
+START_TEST(pkg_freebsd_object_uint_min_from_str)
+{
+	struct facund_object *obj;
+
+	/* Test accessing an object set to 0 from a string will succeed */
+	fail_unless((obj = facund_object_new_uint()) != NULL, NULL);
+
+	fail_unless(facund_object_set_from_str(obj, "0") == 0, NULL);
+	fail_unless(facund_object_get_uint(obj) == 0, NULL);
+	fail_unless(strcmp(facund_object_xml_string(obj),
+	    "<data type=\"unsigned int\">0</data>") == 0, NULL);
+
+	facund_object_free(obj);
+}
+END_TEST
+
+START_TEST(pkg_freebsd_object_uint_bad_min_from_str)
+{
+	struct facund_object *obj;
+
+	/* Test setting an object to a number too small will fail */
+	fail_unless((obj = facund_object_new_uint()) != NULL, NULL);
+
+	fail_unless(facund_object_set_from_str(obj, "-1") == -1, NULL);
+	fail_unless(facund_object_get_error(obj) ==
+	    FACUND_OBJECT_ERROR_BADSTRING, NULL);
+	fail_unless(facund_object_get_uint(obj) == 0, NULL);
+	fail_unless(facund_object_get_error(obj) ==
+	    FACUND_OBJECT_ERROR_UNASSIGNED, NULL);
+	fail_unless(facund_object_xml_string(obj) == NULL, NULL);
+
+	facund_object_free(obj);
+}
+END_TEST
+
+START_TEST(pkg_freebsd_object_uint_max)
+{
+	struct facund_object *obj;
+
+	/* Test accessing an object set to 4294967295 will succeed */
+	fail_unless((obj = facund_object_new_uint()) != NULL, NULL);
+
+	fail_unless(facund_object_set_uint(obj, UINT32_MAX) == 0, NULL);
+	fail_unless(facund_object_get_uint(obj) == UINT32_MAX, NULL);
+	fail_unless(strcmp(facund_object_xml_string(obj),
+	    "<data type=\"unsigned int\">4294967295</data>") == 0, NULL);
+
+	facund_object_free(obj);
+}
+END_TEST
+
+START_TEST(pkg_freebsd_object_uint_max_from_str)
+{
+	struct facund_object *obj;
+
+	/*
+	 * Test accessing an object set to
+	 * 4294967295 from a string will succeed
+	 */
+	fail_unless((obj = facund_object_new_uint()) != NULL, NULL);
+
+	fail_unless(facund_object_set_from_str(obj, "4294967295") == 0, NULL);
+	fail_unless(facund_object_get_uint(obj) == UINT32_MAX, NULL);
+	fail_unless(strcmp(facund_object_xml_string(obj),
+	    "<data type=\"unsigned int\">4294967295</data>") == 0, NULL);
+
+	facund_object_free(obj);
+}
+END_TEST
+
+START_TEST(pkg_freebsd_object_uint_bad_max_from_str)
+{
+	struct facund_object *obj;
+
+	/* Test setting an object to a number too large will fail */
+	fail_unless((obj = facund_object_new_uint()) != NULL, NULL);
+
+	fail_unless(facund_object_set_from_str(obj, "4294967296") == -1, NULL);
+	fail_unless(facund_object_get_error(obj) ==
+	    FACUND_OBJECT_ERROR_BADSTRING, NULL);
+	fail_unless(facund_object_get_uint(obj) == 0, NULL);
+	fail_unless(facund_object_get_error(obj) ==
+	    FACUND_OBJECT_ERROR_UNASSIGNED, NULL);
+	fail_unless(facund_object_xml_string(obj) == NULL, NULL);
+
+	facund_object_free(obj);
+}
+END_TEST
+
+START_TEST(pkg_freebsd_object_uint_bad_from_str)
+{
+	struct facund_object *obj;
+
+	/* Test setting an object to a bad number will fail */
+	fail_unless((obj = facund_object_new_uint()) != NULL, NULL);
+
+	fail_unless(facund_object_set_from_str(obj, "1 f1234") == -1, NULL);
+	fail_unless(facund_object_get_error(obj) ==
+	    FACUND_OBJECT_ERROR_BADSTRING, NULL);
+	fail_unless(facund_object_get_uint(obj) == 0, NULL);
+	fail_unless(facund_object_get_error(obj) ==
+	    FACUND_OBJECT_ERROR_UNASSIGNED, NULL);
+	fail_unless(facund_object_xml_string(obj) == NULL, NULL);
+
+	facund_object_free(obj);
+}
+END_TEST
+
+START_TEST(pkg_freebsd_object_uint_error)
+{
+	struct facund_object *obj;
+
+	/* Test errors are set/reset correctly */
+	fail_unless((obj = facund_object_new_uint()) != NULL, NULL);
+	fail_unless(facund_object_get_error(obj) == FACUND_OBJECT_ERROR_NONE,
+	    NULL);
+
+	/* This should cause an error flag to be set */
+	facund_object_get_uint(obj);
+	fail_unless(facund_object_get_error(obj) ==
+	    FACUND_OBJECT_ERROR_UNASSIGNED, NULL);
+
+	/* This should reset the error flag */
+	facund_object_set_uint(obj, 0);
+	fail_unless(facund_object_get_error(obj) == FACUND_OBJECT_ERROR_NONE,
+	    NULL);
+
+	facund_object_free(obj);
+
+	/* These should fail as they are the wrong types */
+	test_is_not_type(uint, bool, 0, -1);
+	test_is_not_type(uint, int, 0, 0);
+	test_is_not_type(uint, string, 0, 0);
+
+	fail_unless((obj = facund_object_new_uint()) != NULL, NULL);
+		facund_object_set_int(obj, 0);
+		fail_unless(facund_object_get_array_item(obj, 0) == NULL, NULL);
+		fail_unless(facund_object_get_error(obj) ==
+		    FACUND_OBJECT_ERROR_WRONG_TYPE, NULL);
+	facund_object_free(obj);
+}
+END_TEST
+
 /*
  * Tests for a string facund_object
  */
 START_TEST(pkg_freebsd_object_string_null)
 {
-	/* Test if bool functions will fail correctly when passes NULL */
+	/* Test if string functions will fail correctly when passes NULL */
 	fail_unless(facund_object_set_string(NULL, NULL) == -1, NULL);
 	fail_unless(facund_object_set_string(NULL, "string") == -1, NULL);
 	fail_unless(facund_object_get_string(NULL) == NULL, NULL);
@@ -328,11 +683,29 @@
 	tc = tcase_create("integer");
 	tcase_add_test(tc, pkg_freebsd_object_int_null);
 	tcase_add_test(tc, pkg_freebsd_object_int_create);
+	tcase_add_test(tc, pkg_freebsd_object_int_zero);
+	tcase_add_test(tc, pkg_freebsd_object_int_zero_from_str);
+	tcase_add_test(tc, pkg_freebsd_object_int_min);
+	tcase_add_test(tc, pkg_freebsd_object_int_min_from_str);
+	tcase_add_test(tc, pkg_freebsd_object_int_bad_min_from_str);
+	tcase_add_test(tc, pkg_freebsd_object_int_max);
+	tcase_add_test(tc, pkg_freebsd_object_int_max_from_str);
+	tcase_add_test(tc, pkg_freebsd_object_int_bad_max_from_str);
+	tcase_add_test(tc, pkg_freebsd_object_int_bad_from_str);
+	tcase_add_test(tc, pkg_freebsd_object_int_error);
 	suite_add_tcase(s, tc);
 
 	tc = tcase_create("unsigned integer");
 	tcase_add_test(tc, pkg_freebsd_object_uint_null);
 	tcase_add_test(tc, pkg_freebsd_object_uint_create);
+	tcase_add_test(tc, pkg_freebsd_object_uint_min);
+	tcase_add_test(tc, pkg_freebsd_object_uint_min_from_str);
+	tcase_add_test(tc, pkg_freebsd_object_uint_bad_min_from_str);
+	tcase_add_test(tc, pkg_freebsd_object_uint_max);
+	tcase_add_test(tc, pkg_freebsd_object_uint_max_from_str);
+	tcase_add_test(tc, pkg_freebsd_object_uint_bad_max_from_str);
+	tcase_add_test(tc, pkg_freebsd_object_uint_bad_from_str);
+	tcase_add_test(tc, pkg_freebsd_object_int_error);
 	suite_add_tcase(s, tc);
 
 	tc = tcase_create("string");



From zxombie at users.berlios.de  Wed Aug 29 03:05:53 2007
From: zxombie at users.berlios.de (zxombie at users.berlios.de)
Date: Wed, 29 Aug 2007 03:05:53 +0200
Subject: r7 - trunk/lib
Message-ID: <200708290105.l7T15rpv008598@sheep.berlios.de>

Author: zxombie
Date: 2007-08-29 03:05:47 +0200 (Wed, 29 Aug 2007)
New Revision: 7

Modified:
   trunk/lib/facund_object.c
Log:
Fix all the failing facund_object tests

Modified: trunk/lib/facund_object.c
===================================================================
--- trunk/lib/facund_object.c	2007-08-29 01:02:42 UTC (rev 6)
+++ trunk/lib/facund_object.c	2007-08-29 01:05:47 UTC (rev 7)
@@ -86,12 +86,24 @@
 {
 	struct facund_object *real_obj;
 
-	/* TODO: Change these to proper checks */
-	assert(obj != NULL);
-	assert(obj->obj_type == FACUND_BOOL);
+	if (obj == NULL) {
+		return -1;
+	}
+
+	/* Get an object we can edit */
+	real_obj =  __DECONST(struct facund_object *, obj);
+
+	if (obj->obj_type != FACUND_BOOL) {
+		real_obj->obj_error = FACUND_OBJECT_ERROR_WRONG_TYPE;
+		return -1;
+	}
+
+	if (obj->obj_assigned == 0) {
+		real_obj->obj_error = FACUND_OBJECT_ERROR_UNASSIGNED;
+		return -1;
+	}
 	assert(obj->obj_assigned == 1);
 
-	real_obj =  __DECONST(struct facund_object *, obj);
 	real_obj->obj_error = FACUND_OBJECT_ERROR_NONE;
 	return obj->obj_int;
 }
@@ -131,12 +143,24 @@
 {
 	struct facund_object *real_obj;
 
-	/* TODO: Change these to proper checks */
-	assert(obj != NULL);
-	assert(obj->obj_type == FACUND_INT);
+	if (obj == NULL) {
+		return 0;
+	}
+
+	/* Get an object we can edit */
+	real_obj =  __DECONST(struct facund_object *, obj);
+
+	if (obj->obj_type != FACUND_INT) {
+		real_obj->obj_error = FACUND_OBJECT_ERROR_WRONG_TYPE;
+		return 0;
+	}
+
+	if (obj->obj_assigned == 0) {
+		real_obj->obj_error = FACUND_OBJECT_ERROR_UNASSIGNED;
+		return 0;
+	}
 	assert(obj->obj_assigned == 1);
 
-	real_obj =  __DECONST(struct facund_object *, obj);
 	real_obj->obj_error = FACUND_OBJECT_ERROR_NONE;
 	return obj->obj_int;
 }
@@ -176,9 +200,22 @@
 {
 	struct facund_object *real_obj;
 
-	/* TODO: Change these to proper checks */
-	assert(obj != NULL);
-	assert(obj->obj_type == FACUND_UINT);
+	if (obj == NULL) {
+		return 0;
+	}
+
+	/* Get an object we can edit */
+	real_obj =  __DECONST(struct facund_object *, obj);
+
+	if (obj->obj_type != FACUND_UINT) {
+		real_obj->obj_error = FACUND_OBJECT_ERROR_WRONG_TYPE;
+		return 0;
+	}
+
+	if (obj->obj_assigned == 0) {
+		real_obj->obj_error = FACUND_OBJECT_ERROR_UNASSIGNED;
+		return 0;
+	}
 	assert(obj->obj_assigned == 1);
 
 	real_obj =  __DECONST(struct facund_object *, obj);
@@ -233,12 +270,24 @@
 {
 	struct facund_object *real_obj;
 
-	/* TODO: Change these to proper checks */
-	assert(obj != NULL);
-	assert(obj->obj_type == FACUND_STRING);
+	if (obj == NULL) {
+		return NULL;
+	}
+
+	/* Get an object we can edit */
+	real_obj =  __DECONST(struct facund_object *, obj);
+
+	if (obj->obj_type != FACUND_STRING) {
+		real_obj->obj_error = FACUND_OBJECT_ERROR_WRONG_TYPE;
+		return NULL;
+	}
+
+	if (obj->obj_assigned == 0) {
+		real_obj->obj_error = FACUND_OBJECT_ERROR_UNASSIGNED;
+		return NULL;
+	}
 	assert(obj->obj_assigned == 1);
 
-	real_obj =  __DECONST(struct facund_object *, obj);
 	real_obj->obj_error = FACUND_OBJECT_ERROR_NONE;
 
 	return obj->obj_string;
@@ -299,14 +348,29 @@
 {
 	struct facund_object *real_obj;
 
-	/* TODO: Change these to proper checks */
-	assert(obj != NULL);
-	assert(obj->obj_type == FACUND_ARRAY);
+	if (obj == NULL) {
+		return NULL;
+	}
+
+	/* Get an object we can edit */
+	real_obj =  __DECONST(struct facund_object *, obj);
+
+	if (obj->obj_type != FACUND_ARRAY) {
+		real_obj->obj_error = FACUND_OBJECT_ERROR_WRONG_TYPE;
+		return NULL;
+	}
+
+	if (obj->obj_assigned == 0) {
+		real_obj->obj_error = FACUND_OBJECT_ERROR_UNASSIGNED;
+		return NULL;
+	}
 	assert(obj->obj_assigned == 1);
-	if (pos >= obj->obj_array_count)
+
+	if (pos >= obj->obj_array_count) {
+		real_obj->obj_error = FACUND_OBJECT_ERROR_NO_OBJECT;
 		return NULL;
+	}
 
-	real_obj =  __DECONST(struct facund_object *, obj);
 	real_obj->obj_error = FACUND_OBJECT_ERROR_NONE;
 	return obj->obj_array[pos];
 }
@@ -370,9 +434,13 @@
 int
 facund_object_set_from_str(struct facund_object *obj, const char *value)
 {
-	if (obj == NULL || value == NULL) {
+	if (obj == NULL) {
 		return -1;
 	}
+	if (value == NULL) {
+		obj->obj_error = FACUND_OBJECT_ERROR_BADSTRING;
+		return -1;
+	}
 
 	switch(obj->obj_type) {
 	case FACUND_BOOL:
@@ -384,7 +452,7 @@
 
 		data = strtonum(value, INT32_MIN, INT32_MAX, &errstr);
 		if (errstr != NULL) {
-			/* TODO: Error handeling */
+			obj->obj_error = FACUND_OBJECT_ERROR_BADSTRING;
 			return -1;
 		}
 		return facund_object_set_int(obj, data);
@@ -395,7 +463,7 @@
 
 		data = strtonum(value, 0, UINT32_MAX, &errstr);
 		if (errstr != NULL) {
-			/* TODO: Error handeling */
+			obj->obj_error = FACUND_OBJECT_ERROR_BADSTRING;
 			return -1;
 		}
 		return facund_object_set_uint(obj, data);
@@ -429,7 +497,7 @@
 const char *
 facund_object_xml_string(struct facund_object *obj __unused)
 {
-	if (obj == NULL)
+	if (obj == NULL || obj->obj_assigned == 0)
 		return NULL;
 
 	if (obj->obj_xml_string == NULL) {
@@ -462,6 +530,7 @@
 
 				curobj = __DECONST(struct facund_object *,
 				    facund_object_get_array_item(obj, pos));
+				assert(curobj->obj_assigned == 1);
 				tmpdata = facund_object_xml_string(curobj);
 
 				/* Append the new data to the end of the data */
@@ -539,6 +608,7 @@
 		}
 		}
 	} else {
+		assert(obj->obj_assigned == 0);
 		printf("Unassigned");
 	}
 



From zxombie at users.berlios.de  Wed Aug 29 04:20:25 2007
From: zxombie at users.berlios.de (zxombie at users.berlios.de)
Date: Wed, 29 Aug 2007 04:20:25 +0200
Subject: r8 - trunk/lib/test
Message-ID: <200708290220.l7T2KPXe011487@sheep.berlios.de>

Author: zxombie
Date: 2007-08-29 04:20:15 +0200 (Wed, 29 Aug 2007)
New Revision: 8

Modified:
   trunk/lib/test/test_facund_object.c
Log:
Move more tests to use #define's to make adding new tests checks to all tests easier

Modified: trunk/lib/test/test_facund_object.c
===================================================================
--- trunk/lib/test/test_facund_object.c	2007-08-29 01:05:47 UTC (rev 7)
+++ trunk/lib/test/test_facund_object.c	2007-08-29 02:20:15 UTC (rev 8)
@@ -31,7 +31,58 @@
 
 #include <string.h>
 
-#define test_is_not_type(realtype, testtype, value, errvalue) do { \
+#define test_object_create(objtype, typeenum, errvalue) \
+do { \
+	struct facund_object *theobj; \
+	fail_unless((theobj = facund_object_new_##objtype()) != NULL, NULL); \
+	fail_unless(facund_object_get_type(theobj) == typeenum, NULL); \
+	fail_unless(facund_object_get_##objtype(theobj) == errvalue, NULL); \
+	fail_unless(facund_object_xml_string(theobj) == NULL, NULL); \
+	facund_object_free(theobj); \
+} while(0)
+
+#define test_object_assign(objtype, strtype, value, strvalue) \
+do { \
+	struct facund_object *theobj; \
+	fail_unless((theobj = facund_object_new_##objtype()) != NULL, NULL); \
+	fail_unless(facund_object_set_##objtype(theobj, value) == 0, NULL); \
+	fail_unless(facund_object_get_##objtype(theobj) == value, NULL); \
+	fail_unless(strcmp(facund_object_xml_string(theobj), \
+	    "<data type=\""strtype"\">"strvalue"</data>") == 0, NULL); \
+	facund_object_free(theobj); \
+} while (0)
+
+#define test_object_assign_from_string(objtype, strtype, value, strvalue, \
+    expstrvalue) \
+do { \
+	struct facund_object *theobj; \
+	fail_unless((theobj = facund_object_new_##objtype()) != NULL, NULL); \
+	fail_unless(facund_object_set_from_str(theobj, strvalue) == 0, NULL); \
+	fail_unless(facund_object_get_##objtype(theobj) == value, NULL); \
+	fail_unless(strcmp(facund_object_xml_string(theobj), \
+	    "<data type=\""strtype"\">"expstrvalue"</data>") == 0, NULL); \
+	facund_object_free(theobj); \
+} while(0)
+
+#define test_object_error(objtype) \
+do { \
+	struct facund_object *theobj; \
+	fail_unless((theobj = facund_object_new_##objtype()) != NULL, NULL); \
+	fail_unless(facund_object_get_error(theobj) == \
+	    FACUND_OBJECT_ERROR_NONE, NULL); \
+	/* This should cause an error flag to be set */ \
+	facund_object_get_##objtype(theobj); \
+	fail_unless(facund_object_get_error(theobj) == \
+	    FACUND_OBJECT_ERROR_UNASSIGNED, NULL); \
+	/* This should reset the error flag */ \
+	facund_object_set_##objtype(theobj, 0); \
+	fail_unless(facund_object_get_error(theobj) == \
+	    FACUND_OBJECT_ERROR_NONE, NULL); \
+	facund_object_free(theobj); \
+} while (0)
+
+#define test_is_not_type(realtype, testtype, value, errvalue) \
+do { \
 	struct facund_object *newobj; \
 	fail_unless((newobj = facund_object_new_##realtype()) != NULL, NULL); \
 		facund_object_set_##realtype(newobj, value); \
@@ -42,6 +93,17 @@
 	facund_object_free(newobj); \
 } while(0)
 
+#define test_object_is_not_array(objtype, value) \
+do { \
+	struct facund_object *theobj; \
+	fail_unless((theobj = facund_object_new_##objtype()) != NULL, NULL); \
+	facund_object_set_##objtype(theobj, value); \
+	fail_unless(facund_object_get_array_item(theobj, 0) == NULL, NULL); \
+	fail_unless(facund_object_get_error(theobj) == \
+	    FACUND_OBJECT_ERROR_WRONG_TYPE, NULL); \
+	facund_object_free(theobj); \
+} while (0)
+
 /*
  * Tests for a boolean facund_object
  */
@@ -56,15 +118,7 @@
 
 START_TEST(pkg_freebsd_object_bool_create)
 {
-	struct facund_object *obj;
-
-	/* Test accessing an unassigned object will fail */
-	fail_unless((obj = facund_object_new_bool()) != NULL, NULL);
-	fail_unless(facund_object_get_type(obj) == FACUND_BOOL, NULL);
-	fail_unless(facund_object_get_bool(obj) == -1, NULL);
-	fail_unless(facund_object_xml_string(obj) == NULL, NULL);
-
-	facund_object_free(obj);
+	test_object_create(bool, FACUND_BOOL, -1);
 }
 END_TEST
 
@@ -73,15 +127,8 @@
 	struct facund_object *obj;
 
 	/* Test accessing an object set to true will succeed */
-	fail_unless((obj = facund_object_new_bool()) != NULL, NULL);
+	test_object_assign(bool, "bool", 1, "true");
 
-	fail_unless(facund_object_set_bool(obj, 1) == 0, NULL);
-	fail_unless(facund_object_get_bool(obj) == 1, NULL);
-	fail_unless(strcmp(facund_object_xml_string(obj),
-	    "<data type=\"bool\">true</data>") == 0, NULL);
-
-	facund_object_free(obj);
-
 	/* Test setting something that is not 1 is also true */
 	fail_unless((obj = facund_object_new_bool()) != NULL, NULL);
 	fail_unless(facund_object_set_bool(obj, 2) == 0, NULL);
@@ -93,129 +140,41 @@
 
 START_TEST(pkg_freebsd_object_bool_false)
 {
-	struct facund_object *obj;
-
 	/* Test accessing an object set to false will succeed */
-	fail_unless((obj = facund_object_new_bool()) != NULL, NULL);
-
-	fail_unless(facund_object_set_bool(obj, 0) == 0, NULL);
-	fail_unless(facund_object_get_bool(obj) == 0, NULL);
-	fail_unless(strcmp(facund_object_xml_string(obj),
-	    "<data type=\"bool\">false</data>") == 0, NULL);
-
-	facund_object_free(obj);
+	test_object_assign(bool, "bool", 0, "false");
 }
 END_TEST
 
 START_TEST(pkg_freebsd_object_bool_true_from_str)
 {
-	struct facund_object *obj;
-
 	/* Test accessing an object set to false from a string will succeed*/
-	fail_unless((obj = facund_object_new_bool()) != NULL, NULL);
-
-	fail_unless(facund_object_set_from_str(obj, "true") == 0, NULL);
-	fail_unless(facund_object_get_bool(obj) == 1, NULL);
-	fail_unless(strcmp(facund_object_xml_string(obj),
-	    "<data type=\"bool\">true</data>") == 0, NULL);
-
-	facund_object_free(obj);
-
-	fail_unless((obj = facund_object_new_bool()) != NULL, NULL);
-
-	fail_unless(facund_object_set_from_str(obj, "TRUE") == 0, NULL);
-	fail_unless(facund_object_get_bool(obj) == 1, NULL);
-	fail_unless(strcmp(facund_object_xml_string(obj),
-	    "<data type=\"bool\">true</data>") == 0, NULL);
-
-	facund_object_free(obj);
-
-	fail_unless((obj = facund_object_new_bool()) != NULL, NULL);
-
-	fail_unless(facund_object_set_from_str(obj, "TrUe") == 0, NULL);
-	fail_unless(facund_object_get_bool(obj) == 1, NULL);
-	fail_unless(strcmp(facund_object_xml_string(obj),
-	    "<data type=\"bool\">true</data>") == 0, NULL);
-
-	facund_object_free(obj);
+	test_object_assign_from_string(bool, "bool", 1, "true", "true");
+	test_object_assign_from_string(bool, "bool", 1, "TRUE", "true");
+	test_object_assign_from_string(bool, "bool", 1, "TrUe", "true");
 }
 END_TEST
 
 START_TEST(pkg_freebsd_object_bool_false_from_str)
 {
-	struct facund_object *obj;
-
 	/* Test accessing an object set to false from a string will succeed*/
-	fail_unless((obj = facund_object_new_bool()) != NULL, NULL);
-
-	fail_unless(facund_object_set_from_str(obj, "false") == 0, NULL);
-	fail_unless(facund_object_get_bool(obj) == 0, NULL);
-	fail_unless(strcmp(facund_object_xml_string(obj),
-	    "<data type=\"bool\">false</data>") == 0, NULL);
-
-	facund_object_free(obj);
-
-	fail_unless((obj = facund_object_new_bool()) != NULL, NULL);
-
-	fail_unless(facund_object_set_from_str(obj, "FALSE") == 0, NULL);
-	fail_unless(facund_object_get_bool(obj) == 0, NULL);
-	fail_unless(strcmp(facund_object_xml_string(obj),
-	    "<data type=\"bool\">false</data>") == 0, NULL);
-
-	facund_object_free(obj);
-
-	fail_unless((obj = facund_object_new_bool()) != NULL, NULL);
-
-	fail_unless(facund_object_set_from_str(obj, "FaLsE") == 0, NULL);
-	fail_unless(facund_object_get_bool(obj) == 0, NULL);
-	fail_unless(strcmp(facund_object_xml_string(obj),
-	    "<data type=\"bool\">false</data>") == 0, NULL);
-
-	facund_object_free(obj);
-
-	fail_unless((obj = facund_object_new_bool()) != NULL, NULL);
-
-	fail_unless(facund_object_set_from_str(obj, "string") == 0, NULL);
-	fail_unless(facund_object_get_bool(obj) == 0, NULL);
-	fail_unless(strcmp(facund_object_xml_string(obj),
-	    "<data type=\"bool\">false</data>") == 0, NULL);
-
-	facund_object_free(obj);
+	test_object_assign_from_string(bool, "bool", 0, "false", "false");
+	test_object_assign_from_string(bool, "bool", 0, "FALSE", "false");
+	test_object_assign_from_string(bool, "bool", 0, "FaLsE", "false");
+	test_object_assign_from_string(bool, "bool", 0, "string", "false");
 }
 END_TEST
 
 START_TEST(pkg_freebsd_object_bool_error)
 {
-	struct facund_object *obj;
-
 	/* Test errors are set/reset correctly */
-	fail_unless((obj = facund_object_new_bool()) != NULL, NULL);
-	fail_unless(facund_object_get_error(obj) == FACUND_OBJECT_ERROR_NONE,
-	    NULL);
+	test_object_error(bool);
 
-	/* This should cause an error flag to be set */
-	facund_object_get_bool(obj);
-	fail_unless(facund_object_get_error(obj) ==
-	    FACUND_OBJECT_ERROR_UNASSIGNED, NULL);
-
-	/* This should reset the error flag */
-	facund_object_set_bool(obj, 0);
-	fail_unless(facund_object_get_error(obj) == FACUND_OBJECT_ERROR_NONE,
-	    NULL);
-
-	facund_object_free(obj);
-
-	/* These should fail as they are the wrong types */
+	/* Test accessing with the wrong accessor fails */
 	test_is_not_type(bool, int, 0, 0);
 	test_is_not_type(bool, uint, 0, 0);
 	test_is_not_type(bool, string, 0, 0);
 
-	fail_unless((obj = facund_object_new_bool()) != NULL, NULL);
-		facund_object_set_bool(obj, 0);
-		fail_unless(facund_object_get_array_item(obj, 0) == NULL, NULL);
-		fail_unless(facund_object_get_error(obj) ==
-		    FACUND_OBJECT_ERROR_WRONG_TYPE, NULL);
-	facund_object_free(obj);
+	test_object_is_not_array(bool, 0);
 }
 END_TEST
 
@@ -234,84 +193,36 @@
 
 START_TEST(pkg_freebsd_object_int_create)
 {
-	struct facund_object *obj;
-
 	/* Tests accessing an unassigned int will fail */
-	fail_unless((obj = facund_object_new_int()) != NULL, NULL);
-	fail_unless(facund_object_get_error(obj) == FACUND_OBJECT_ERROR_NONE,
-	    NULL);
-	fail_unless(facund_object_get_type(obj) == FACUND_INT, NULL);
-	fail_unless(facund_object_get_int(obj) == 0, NULL);
-	fail_unless(facund_object_get_error(obj) ==
-	    FACUND_OBJECT_ERROR_UNASSIGNED, NULL);
-	facund_object_free(obj);
+	test_object_create(int, FACUND_INT, 0);
 }
 END_TEST
 
 START_TEST(pkg_freebsd_object_int_zero)
 {
-	struct facund_object *obj;
-
 	/* Test accessing an object set to 0 will succeed */
-	fail_unless((obj = facund_object_new_int()) != NULL, NULL);
-
-	fail_unless(facund_object_set_int(obj, 0) == 0, NULL);
-	fail_unless(facund_object_get_int(obj) == 0, NULL);
-	fail_unless(strcmp(facund_object_xml_string(obj),
-	    "<data type=\"int\">0</data>") == 0, NULL);
-
-	facund_object_free(obj);
+	test_object_assign(int, "int", 0, "0");
 }
 END_TEST
 
 START_TEST(pkg_freebsd_object_int_zero_from_str)
 {
-	struct facund_object *obj;
-
 	/* Test accessing an object set to 0 from a string will succeed */
-	fail_unless((obj = facund_object_new_int()) != NULL, NULL);
-
-	fail_unless(facund_object_set_from_str(obj, "0") == 0, NULL);
-	fail_unless(facund_object_get_int(obj) == 0, NULL);
-	fail_unless(strcmp(facund_object_xml_string(obj),
-	    "<data type=\"int\">0</data>") == 0, NULL);
-
-	facund_object_free(obj);
+	test_object_assign_from_string(int, "int", 0, "0", "0");
 }
 END_TEST
 
 START_TEST(pkg_freebsd_object_int_min)
 {
-	struct facund_object *obj;
-
 	/* Test accessing an object set to -2147483648 will succeed */
-	fail_unless((obj = facund_object_new_int()) != NULL, NULL);
-
-	fail_unless(facund_object_set_int(obj, INT32_MIN) == 0, NULL);
-	fail_unless(facund_object_get_int(obj) == INT32_MIN, NULL);
-	fail_unless(strcmp(facund_object_xml_string(obj),
-	    "<data type=\"int\">-2147483648</data>") == 0, NULL);
-
-	facund_object_free(obj);
+	test_object_assign(int, "int", INT32_MIN, "-2147483648");
 }
 END_TEST
 
 START_TEST(pkg_freebsd_object_int_min_from_str)
 {
-	struct facund_object *obj;
-
-	/*
-	 * Test accessing an object set to
-	 * -2147483648 from a string will succeed
-	 */
-	fail_unless((obj = facund_object_new_int()) != NULL, NULL);
-
-	fail_unless(facund_object_set_from_str(obj, "-2147483648") == 0, NULL);
-	fail_unless(facund_object_get_int(obj) == INT32_MIN, NULL);
-	fail_unless(strcmp(facund_object_xml_string(obj),
-	    "<data type=\"int\">-2147483648</data>") == 0, NULL);
-
-	facund_object_free(obj);
+	test_object_assign_from_string(int, "int", INT32_MIN, "-2147483648",
+	    "-2147483648");
 }
 END_TEST
 
@@ -336,36 +247,15 @@
 
 START_TEST(pkg_freebsd_object_int_max)
 {
-	struct facund_object *obj;
-
 	/* Test accessing an object set to 2147483647 will succeed */
-	fail_unless((obj = facund_object_new_int()) != NULL, NULL);
-
-	fail_unless(facund_object_set_int(obj, INT32_MAX) == 0, NULL);
-	fail_unless(facund_object_get_int(obj) == INT32_MAX, NULL);
-	fail_unless(strcmp(facund_object_xml_string(obj),
-	    "<data type=\"int\">2147483647</data>") == 0, NULL);
-
-	facund_object_free(obj);
+	test_object_assign(int, "int", INT32_MAX, "2147483647");
 }
 END_TEST
 
 START_TEST(pkg_freebsd_object_int_max_from_str)
 {
-	struct facund_object *obj;
-
-	/*
-	 * Test accessing an object set to
-	 * 2147483647 from a string will succeed
-	 */
-	fail_unless((obj = facund_object_new_int()) != NULL, NULL);
-
-	fail_unless(facund_object_set_from_str(obj, "2147483647") == 0, NULL);
-	fail_unless(facund_object_get_int(obj) == INT32_MAX, NULL);
-	fail_unless(strcmp(facund_object_xml_string(obj),
-	    "<data type=\"int\">2147483647</data>") == 0, NULL);
-
-	facund_object_free(obj);
+	test_object_assign_from_string(int, "int", INT32_MAX, "2147483647",
+	    "2147483647");
 }
 END_TEST
 
@@ -409,36 +299,15 @@
 
 START_TEST(pkg_freebsd_object_int_error)
 {
-	struct facund_object *obj;
-
 	/* Test errors are set/reset correctly */
-	fail_unless((obj = facund_object_new_int()) != NULL, NULL);
-	fail_unless(facund_object_get_error(obj) == FACUND_OBJECT_ERROR_NONE,
-	    NULL);
+	test_object_error(int);
 
-	/* This should cause an error flag to be set */
-	facund_object_get_int(obj);
-	fail_unless(facund_object_get_error(obj) ==
-	    FACUND_OBJECT_ERROR_UNASSIGNED, NULL);
-
-	/* This should reset the error flag */
-	facund_object_set_int(obj, 0);
-	fail_unless(facund_object_get_error(obj) == FACUND_OBJECT_ERROR_NONE,
-	    NULL);
-
-	facund_object_free(obj);
-
-	/* These should fail as they are the wrong types */
+	/* Test accessing with the wrong accessor fails */
 	test_is_not_type(int, bool, 0, -1);
 	test_is_not_type(int, uint, 0, 0);
 	test_is_not_type(int, string, 0, 0);
 
-	fail_unless((obj = facund_object_new_int()) != NULL, NULL);
-		facund_object_set_int(obj, 0);
-		fail_unless(facund_object_get_array_item(obj, 0) == NULL, NULL);
-		fail_unless(facund_object_get_error(obj) ==
-		    FACUND_OBJECT_ERROR_WRONG_TYPE, NULL);
-	facund_object_free(obj);
+	test_object_is_not_array(int, 0);
 }
 END_TEST
 
@@ -456,49 +325,21 @@
 
 START_TEST(pkg_freebsd_object_uint_create)
 {
-	struct facund_object *obj;
-
 	/* Test accessing an unassigned unsigned int will fail */
-	fail_unless((obj = facund_object_new_uint()) != NULL, NULL);
-	fail_unless(facund_object_get_error(obj) == FACUND_OBJECT_ERROR_NONE,
-	    NULL);
-	fail_unless(facund_object_get_type(obj) == FACUND_UINT, NULL);
-	fail_unless(facund_object_get_uint(obj) == 0, NULL);
-	fail_unless(facund_object_get_error(obj) ==
-	    FACUND_OBJECT_ERROR_UNASSIGNED, NULL);
-	facund_object_free(obj);
+	test_object_create(uint, FACUND_UINT, 0);
 }
 END_TEST
 
 START_TEST(pkg_freebsd_object_uint_min)
 {
-	struct facund_object *obj;
-
 	/* Test accessing an object set to 0 will succeed */
-	fail_unless((obj = facund_object_new_uint()) != NULL, NULL);
-
-	fail_unless(facund_object_set_uint(obj, 0) == 0, NULL);
-	fail_unless(facund_object_get_uint(obj) == 0, NULL);
-	fail_unless(strcmp(facund_object_xml_string(obj),
-	    "<data type=\"unsigned int\">0</data>") == 0, NULL);
-
-	facund_object_free(obj);
+	test_object_assign(uint, "unsigned int", 0, "0");
 }
 END_TEST
 
 START_TEST(pkg_freebsd_object_uint_min_from_str)
 {
-	struct facund_object *obj;
-
-	/* Test accessing an object set to 0 from a string will succeed */
-	fail_unless((obj = facund_object_new_uint()) != NULL, NULL);
-
-	fail_unless(facund_object_set_from_str(obj, "0") == 0, NULL);
-	fail_unless(facund_object_get_uint(obj) == 0, NULL);
-	fail_unless(strcmp(facund_object_xml_string(obj),
-	    "<data type=\"unsigned int\">0</data>") == 0, NULL);
-
-	facund_object_free(obj);
+	test_object_assign_from_string(uint, "unsigned int", 0, "0", "0");
 }
 END_TEST
 
@@ -523,36 +364,15 @@
 
 START_TEST(pkg_freebsd_object_uint_max)
 {
-	struct facund_object *obj;
-
 	/* Test accessing an object set to 4294967295 will succeed */
-	fail_unless((obj = facund_object_new_uint()) != NULL, NULL);
-
-	fail_unless(facund_object_set_uint(obj, UINT32_MAX) == 0, NULL);
-	fail_unless(facund_object_get_uint(obj) == UINT32_MAX, NULL);
-	fail_unless(strcmp(facund_object_xml_string(obj),
-	    "<data type=\"unsigned int\">4294967295</data>") == 0, NULL);
-
-	facund_object_free(obj);
+	test_object_assign(uint, "unsigned int", UINT32_MAX, "4294967295");
 }
 END_TEST
 
 START_TEST(pkg_freebsd_object_uint_max_from_str)
 {
-	struct facund_object *obj;
-
-	/*
-	 * Test accessing an object set to
-	 * 4294967295 from a string will succeed
-	 */
-	fail_unless((obj = facund_object_new_uint()) != NULL, NULL);
-
-	fail_unless(facund_object_set_from_str(obj, "4294967295") == 0, NULL);
-	fail_unless(facund_object_get_uint(obj) == UINT32_MAX, NULL);
-	fail_unless(strcmp(facund_object_xml_string(obj),
-	    "<data type=\"unsigned int\">4294967295</data>") == 0, NULL);
-
-	facund_object_free(obj);
+	test_object_assign_from_string(uint, "unsigned int", UINT32_MAX,
+	    "4294967295", "4294967295");
 }
 END_TEST
 
@@ -596,36 +416,14 @@
 
 START_TEST(pkg_freebsd_object_uint_error)
 {
-	struct facund_object *obj;
-
 	/* Test errors are set/reset correctly */
-	fail_unless((obj = facund_object_new_uint()) != NULL, NULL);
-	fail_unless(facund_object_get_error(obj) == FACUND_OBJECT_ERROR_NONE,
-	    NULL);
+	test_object_error(uint);
 
-	/* This should cause an error flag to be set */
-	facund_object_get_uint(obj);
-	fail_unless(facund_object_get_error(obj) ==
-	    FACUND_OBJECT_ERROR_UNASSIGNED, NULL);
-
-	/* This should reset the error flag */
-	facund_object_set_uint(obj, 0);
-	fail_unless(facund_object_get_error(obj) == FACUND_OBJECT_ERROR_NONE,
-	    NULL);
-
-	facund_object_free(obj);
-
-	/* These should fail as they are the wrong types */
+	/* Test accessing an object with the wrong accessor fails */
 	test_is_not_type(uint, bool, 0, -1);
 	test_is_not_type(uint, int, 0, 0);
 	test_is_not_type(uint, string, 0, 0);
-
-	fail_unless((obj = facund_object_new_uint()) != NULL, NULL);
-		facund_object_set_int(obj, 0);
-		fail_unless(facund_object_get_array_item(obj, 0) == NULL, NULL);
-		fail_unless(facund_object_get_error(obj) ==
-		    FACUND_OBJECT_ERROR_WRONG_TYPE, NULL);
-	facund_object_free(obj);
+	test_object_is_not_array(uint, 0);
 }
 END_TEST
 
@@ -643,17 +441,8 @@
 
 START_TEST(pkg_freebsd_object_string_create)
 {
-	struct facund_object *obj;
-
 	/* Test accessing an unassigned string will fail */
-	fail_unless((obj = facund_object_new_string()) != NULL, NULL);
-	fail_unless(facund_object_get_error(obj) == FACUND_OBJECT_ERROR_NONE,
-	    NULL);
-	fail_unless(facund_object_get_type(obj) == FACUND_STRING, NULL);
-	fail_unless(facund_object_get_string(obj) == NULL, NULL);
-	fail_unless(facund_object_get_error(obj) ==
-	    FACUND_OBJECT_ERROR_UNASSIGNED, NULL);
-	facund_object_free(obj);
+	test_object_create(string, FACUND_STRING, 0);
 }
 END_TEST
 
@@ -705,7 +494,7 @@
 	tcase_add_test(tc, pkg_freebsd_object_uint_max_from_str);
 	tcase_add_test(tc, pkg_freebsd_object_uint_bad_max_from_str);
 	tcase_add_test(tc, pkg_freebsd_object_uint_bad_from_str);
-	tcase_add_test(tc, pkg_freebsd_object_int_error);
+	tcase_add_test(tc, pkg_freebsd_object_uint_error);
 	suite_add_tcase(s, tc);
 
 	tc = tcase_create("string");



From zxombie at users.berlios.de  Wed Aug 29 04:24:42 2007
From: zxombie at users.berlios.de (zxombie at users.berlios.de)
Date: Wed, 29 Aug 2007 04:24:42 +0200
Subject: r9 - trunk/lib
Message-ID: <200708290224.l7T2OglD011569@sheep.berlios.de>

Author: zxombie
Date: 2007-08-29 04:24:35 +0200 (Wed, 29 Aug 2007)
New Revision: 9

Modified:
   trunk/lib/facund_connection.c
Log:
Don't seg fault on a NULL string

Modified: trunk/lib/facund_connection.c
===================================================================
--- trunk/lib/facund_connection.c	2007-08-29 02:20:15 UTC (rev 8)
+++ trunk/lib/facund_connection.c	2007-08-29 02:24:35 UTC (rev 9)
@@ -29,6 +29,7 @@
 #include <sys/socket.h>
 #include <sys/un.h>
 
+#include <assert.h>
 #include <err.h>
 #include <errno.h>
 #include <stdio.h>
@@ -49,6 +50,7 @@
 {
 	struct facund_conn *conn;
 
+	assert(sock != NULL);
 	conn = calloc(1, sizeof(struct facund_conn));
 	if (conn == NULL) {
 		return NULL;
@@ -79,6 +81,9 @@
 {
 	struct facund_conn *conn;
 
+	if (sock == NULL) {
+		return NULL;
+	}
 	conn = facund_create(sock);
 	if (conn == NULL) {
 		return NULL;
@@ -109,6 +114,9 @@
 {
 	struct facund_conn *conn;
 
+	if (s == NULL) {
+		return NULL;
+	}
 	conn = facund_create(s);
 	if (conn == NULL) {
 		return NULL;



From zxombie at users.berlios.de  Wed Aug 29 05:05:29 2007
From: zxombie at users.berlios.de (zxombie at users.berlios.de)
Date: Wed, 29 Aug 2007 05:05:29 +0200
Subject: r10 - trunk/lib/test
Message-ID: <200708290305.l7T35Tja013302@sheep.berlios.de>

Author: zxombie
Date: 2007-08-29 05:05:24 +0200 (Wed, 29 Aug 2007)
New Revision: 10

Modified:
   trunk/lib/test/test_facund_connection.c
Log:
Add tests to check sending messages over the socket works

Modified: trunk/lib/test/test_facund_connection.c
===================================================================
--- trunk/lib/test/test_facund_connection.c	2007-08-29 02:24:35 UTC (rev 9)
+++ trunk/lib/test/test_facund_connection.c	2007-08-29 03:05:24 UTC (rev 10)
@@ -29,7 +29,13 @@
 
 #include <facund_connection.h>
 
-/* Tests for a facund_connection server */
+#include <sys/stat.h>
+
+#include <string.h>
+
+/*
+ * Tests for a facund_connection server
+ */
 START_TEST(pkg_freebsd_connection_server_null)
 {
 	/* Check a NULL argument returns NULL */
@@ -37,7 +43,25 @@
 }
 END_TEST
 
-/* Tests for a facund_connection client */
+START_TEST(pkg_freebsd_connection_server_good)
+{
+	struct facund_conn *conn;
+	struct stat sb;
+
+	fail_unless((conn = facund_connect_server("/tmp/facund_test")) != NULL,
+	    NULL);
+	fail_unless(lstat("/tmp/facund_test", &sb) == 0, NULL);
+	fail_unless(S_ISSOCK(sb.st_mode), NULL);
+	facund_cleanup(conn);
+
+	/* Check the socket is cleaned up */
+	fail_unless(lstat("/tmp/facund_test", &sb) == -1, NULL);
+}
+END_TEST
+
+/*
+ * Tests for a facund_connection client
+ */
 START_TEST(pkg_freebsd_connection_client_null)
 {
 	/* Check a NULL argument returns NULL */
@@ -48,10 +72,41 @@
 START_TEST(pkg_freebsd_connection_client_nonexistant)
 {
 	/* Check a non-existant socket returns NULL */
-	fail_unless(facund_connect_server("/nonexistant") == NULL);
+	fail_unless(facund_connect_client("/nonexistant") == NULL, NULL);
 }
 END_TEST
 
+/*
+ * Tests for both working together
+ */
+START_TEST(pkg_freebsd_connection_cs_connects)
+{
+	char buf[5];
+
+	struct facund_conn *conn_s, *conn_c;
+	fail_unless((conn_s = facund_connect_server("/tmp/facund_test"))
+	    != NULL, NULL);
+	fail_unless((conn_c = facund_connect_client("/tmp/facund_test"))
+	    != NULL, NULL);
+	fail_unless(facund_accept(conn_s) == 0, NULL);
+
+	/* Test sending Client -> Server works */
+	fail_unless(facund_send(conn_c, "test", 4) == 4, NULL);
+	fail_unless(facund_recv(conn_s, buf, 4) == 4, NULL);
+	buf[4] = '\0';
+	fail_unless(strcmp(buf, "test") == 0, NULL);
+
+	/* Test sending Server -> Client works */
+	fail_unless(facund_send(conn_s, "mesg", 4) == 4, NULL);
+	fail_unless(facund_recv(conn_c, buf, 4) == 4, NULL);
+	buf[4] = '\0';
+	fail_unless(strcmp(buf, "mesg") == 0, NULL);
+
+	facund_close(conn_c);
+	facund_cleanup(conn_s);
+}
+END_TEST
+
 Suite *
 facund_connection_suite()
 {
@@ -62,13 +117,18 @@
 
 	tc = tcase_create("server");
 	tcase_add_test(tc, pkg_freebsd_connection_server_null);
+	tcase_add_test(tc, pkg_freebsd_connection_server_good);
 	suite_add_tcase(s, tc);
 
-	tc = tcase_create("server");
+	tc = tcase_create("client");
 	tcase_add_test(tc, pkg_freebsd_connection_client_null);
 	tcase_add_test(tc, pkg_freebsd_connection_client_nonexistant);
 	suite_add_tcase(s, tc);
 
+	tc = tcase_create("client server");
+	tcase_add_test(tc, pkg_freebsd_connection_cs_connects);
+	suite_add_tcase(s, tc);
+
 	return s;
 }
 



From zxombie at users.berlios.de  Wed Aug 29 07:51:12 2007
From: zxombie at users.berlios.de (zxombie at users.berlios.de)
Date: Wed, 29 Aug 2007 07:51:12 +0200
Subject: r11 - trunk/lib/test
Message-ID: <200708290551.l7T5pCl4000588@sheep.berlios.de>

Author: zxombie
Date: 2007-08-29 07:50:57 +0200 (Wed, 29 Aug 2007)
New Revision: 11

Added:
   trunk/lib/test/test_facund_response.c
Modified:
   trunk/lib/test/Makefile
   trunk/lib/test/main.c
   trunk/lib/test/test.h
   trunk/lib/test/test_facund_connection.c
   trunk/lib/test/test_facund_object.c
Log:
Fix the name's of the tests
Add tests for a facund_response


Modified: trunk/lib/test/Makefile
===================================================================
--- trunk/lib/test/Makefile	2007-08-29 03:05:24 UTC (rev 10)
+++ trunk/lib/test/Makefile	2007-08-29 05:50:57 UTC (rev 11)
@@ -1,5 +1,6 @@
 PROG=	tests
-SRCS=	main.c test_facund_connection.c test_facund_object.c
+SRCS=	main.c test_facund_connection.c test_facund_object.c \
+	test_facund_response.c
 
 WARNS?=		6
 

Modified: trunk/lib/test/main.c
===================================================================
--- trunk/lib/test/main.c	2007-08-29 03:05:24 UTC (rev 10)
+++ trunk/lib/test/main.c	2007-08-29 05:50:57 UTC (rev 11)
@@ -37,6 +37,7 @@
 
 	sr = srunner_create(facund_connection_suite());
 	srunner_add_suite(sr, facund_object_suite());
+	srunner_add_suite(sr, facund_response_suite());
 
 	srunner_run_all(sr, CK_NORMAL);
 	fail_count = srunner_ntests_failed(sr);

Modified: trunk/lib/test/test.h
===================================================================
--- trunk/lib/test/test.h	2007-08-29 03:05:24 UTC (rev 10)
+++ trunk/lib/test/test.h	2007-08-29 05:50:57 UTC (rev 11)
@@ -32,5 +32,6 @@
 
 Suite *facund_connection_suite(void);
 Suite *facund_object_suite(void);
+Suite *facund_response_suite(void);
 
 #endif /* FACND_TEST_H */

Modified: trunk/lib/test/test_facund_connection.c
===================================================================
--- trunk/lib/test/test_facund_connection.c	2007-08-29 03:05:24 UTC (rev 10)
+++ trunk/lib/test/test_facund_connection.c	2007-08-29 05:50:57 UTC (rev 11)
@@ -36,14 +36,14 @@
 /*
  * Tests for a facund_connection server
  */
-START_TEST(pkg_freebsd_connection_server_null)
+START_TEST(facund_connection_server_null)
 {
 	/* Check a NULL argument returns NULL */
 	fail_unless(facund_connect_server(NULL) == NULL);
 }
 END_TEST
 
-START_TEST(pkg_freebsd_connection_server_good)
+START_TEST(facund_connection_server_good)
 {
 	struct facund_conn *conn;
 	struct stat sb;
@@ -62,14 +62,14 @@
 /*
  * Tests for a facund_connection client
  */
-START_TEST(pkg_freebsd_connection_client_null)
+START_TEST(facund_connection_client_null)
 {
 	/* Check a NULL argument returns NULL */
 	fail_unless(facund_connect_client(NULL) == NULL);
 }
 END_TEST
 
-START_TEST(pkg_freebsd_connection_client_nonexistant)
+START_TEST(facund_connection_client_nonexistant)
 {
 	/* Check a non-existant socket returns NULL */
 	fail_unless(facund_connect_client("/nonexistant") == NULL, NULL);
@@ -79,7 +79,7 @@
 /*
  * Tests for both working together
  */
-START_TEST(pkg_freebsd_connection_cs_connects)
+START_TEST(facund_connection_cs_connects)
 {
 	char buf[5];
 
@@ -116,17 +116,17 @@
 	s = suite_create("facund_connection");
 
 	tc = tcase_create("server");
-	tcase_add_test(tc, pkg_freebsd_connection_server_null);
-	tcase_add_test(tc, pkg_freebsd_connection_server_good);
+	tcase_add_test(tc, facund_connection_server_null);
+	tcase_add_test(tc, facund_connection_server_good);
 	suite_add_tcase(s, tc);
 
 	tc = tcase_create("client");
-	tcase_add_test(tc, pkg_freebsd_connection_client_null);
-	tcase_add_test(tc, pkg_freebsd_connection_client_nonexistant);
+	tcase_add_test(tc, facund_connection_client_null);
+	tcase_add_test(tc, facund_connection_client_nonexistant);
 	suite_add_tcase(s, tc);
 
 	tc = tcase_create("client server");
-	tcase_add_test(tc, pkg_freebsd_connection_cs_connects);
+	tcase_add_test(tc, facund_connection_cs_connects);
 	suite_add_tcase(s, tc);
 
 	return s;

Modified: trunk/lib/test/test_facund_object.c
===================================================================
--- trunk/lib/test/test_facund_object.c	2007-08-29 03:05:24 UTC (rev 10)
+++ trunk/lib/test/test_facund_object.c	2007-08-29 05:50:57 UTC (rev 11)
@@ -107,7 +107,7 @@
 /*
  * Tests for a boolean facund_object
  */
-START_TEST(pkg_freebsd_object_bool_null)
+START_TEST(facund_object_bool_null)
 {
 	/* Test if bool functions will fail correctly when passes NULL */
 	fail_unless(facund_object_set_bool(NULL, 0) == -1, NULL);
@@ -116,13 +116,13 @@
 }
 END_TEST
 
-START_TEST(pkg_freebsd_object_bool_create)
+START_TEST(facund_object_bool_create)
 {
 	test_object_create(bool, FACUND_BOOL, -1);
 }
 END_TEST
 
-START_TEST(pkg_freebsd_object_bool_true)
+START_TEST(facund_object_bool_true)
 {
 	struct facund_object *obj;
 
@@ -138,14 +138,14 @@
 }
 END_TEST
 
-START_TEST(pkg_freebsd_object_bool_false)
+START_TEST(facund_object_bool_false)
 {
 	/* Test accessing an object set to false will succeed */
 	test_object_assign(bool, "bool", 0, "false");
 }
 END_TEST
 
-START_TEST(pkg_freebsd_object_bool_true_from_str)
+START_TEST(facund_object_bool_true_from_str)
 {
 	/* Test accessing an object set to false from a string will succeed*/
 	test_object_assign_from_string(bool, "bool", 1, "true", "true");
@@ -154,7 +154,7 @@
 }
 END_TEST
 
-START_TEST(pkg_freebsd_object_bool_false_from_str)
+START_TEST(facund_object_bool_false_from_str)
 {
 	/* Test accessing an object set to false from a string will succeed*/
 	test_object_assign_from_string(bool, "bool", 0, "false", "false");
@@ -164,7 +164,7 @@
 }
 END_TEST
 
-START_TEST(pkg_freebsd_object_bool_error)
+START_TEST(facund_object_bool_error)
 {
 	/* Test errors are set/reset correctly */
 	test_object_error(bool);
@@ -181,7 +181,7 @@
 /*
  * Tests for an integer facund_object
  */
-START_TEST(pkg_freebsd_object_int_null)
+START_TEST(facund_object_int_null)
 {
 	/* Test if int functions will fail correctly when passes NULL */
 	fail_unless(facund_object_set_int(NULL, -1) == -1, NULL);
@@ -191,42 +191,42 @@
 }
 END_TEST
 
-START_TEST(pkg_freebsd_object_int_create)
+START_TEST(facund_object_int_create)
 {
 	/* Tests accessing an unassigned int will fail */
 	test_object_create(int, FACUND_INT, 0);
 }
 END_TEST
 
-START_TEST(pkg_freebsd_object_int_zero)
+START_TEST(facund_object_int_zero)
 {
 	/* Test accessing an object set to 0 will succeed */
 	test_object_assign(int, "int", 0, "0");
 }
 END_TEST
 
-START_TEST(pkg_freebsd_object_int_zero_from_str)
+START_TEST(facund_object_int_zero_from_str)
 {
 	/* Test accessing an object set to 0 from a string will succeed */
 	test_object_assign_from_string(int, "int", 0, "0", "0");
 }
 END_TEST
 
-START_TEST(pkg_freebsd_object_int_min)
+START_TEST(facund_object_int_min)
 {
 	/* Test accessing an object set to -2147483648 will succeed */
 	test_object_assign(int, "int", INT32_MIN, "-2147483648");
 }
 END_TEST
 
-START_TEST(pkg_freebsd_object_int_min_from_str)
+START_TEST(facund_object_int_min_from_str)
 {
 	test_object_assign_from_string(int, "int", INT32_MIN, "-2147483648",
 	    "-2147483648");
 }
 END_TEST
 
-START_TEST(pkg_freebsd_object_int_bad_min_from_str)
+START_TEST(facund_object_int_bad_min_from_str)
 {
 	struct facund_object *obj;
 
@@ -245,21 +245,21 @@
 }
 END_TEST
 
-START_TEST(pkg_freebsd_object_int_max)
+START_TEST(facund_object_int_max)
 {
 	/* Test accessing an object set to 2147483647 will succeed */
 	test_object_assign(int, "int", INT32_MAX, "2147483647");
 }
 END_TEST
 
-START_TEST(pkg_freebsd_object_int_max_from_str)
+START_TEST(facund_object_int_max_from_str)
 {
 	test_object_assign_from_string(int, "int", INT32_MAX, "2147483647",
 	    "2147483647");
 }
 END_TEST
 
-START_TEST(pkg_freebsd_object_int_bad_max_from_str)
+START_TEST(facund_object_int_bad_max_from_str)
 {
 	struct facund_object *obj;
 
@@ -278,7 +278,7 @@
 }
 END_TEST
 
-START_TEST(pkg_freebsd_object_int_bad_from_str)
+START_TEST(facund_object_int_bad_from_str)
 {
 	struct facund_object *obj;
 
@@ -297,7 +297,7 @@
 }
 END_TEST
 
-START_TEST(pkg_freebsd_object_int_error)
+START_TEST(facund_object_int_error)
 {
 	/* Test errors are set/reset correctly */
 	test_object_error(int);
@@ -314,7 +314,7 @@
 /*
  * Tests for an unsigned integer facund_object
  */
-START_TEST(pkg_freebsd_object_uint_null)
+START_TEST(facund_object_uint_null)
 {
 	/* Test if uint functions will fail correctly when passes NULL */
 	fail_unless(facund_object_set_uint(NULL, 0) == -1, NULL);
@@ -323,27 +323,27 @@
 }
 END_TEST
 
-START_TEST(pkg_freebsd_object_uint_create)
+START_TEST(facund_object_uint_create)
 {
 	/* Test accessing an unassigned unsigned int will fail */
 	test_object_create(uint, FACUND_UINT, 0);
 }
 END_TEST
 
-START_TEST(pkg_freebsd_object_uint_min)
+START_TEST(facund_object_uint_min)
 {
 	/* Test accessing an object set to 0 will succeed */
 	test_object_assign(uint, "unsigned int", 0, "0");
 }
 END_TEST
 
-START_TEST(pkg_freebsd_object_uint_min_from_str)
+START_TEST(facund_object_uint_min_from_str)
 {
 	test_object_assign_from_string(uint, "unsigned int", 0, "0", "0");
 }
 END_TEST
 
-START_TEST(pkg_freebsd_object_uint_bad_min_from_str)
+START_TEST(facund_object_uint_bad_min_from_str)
 {
 	struct facund_object *obj;
 
@@ -362,21 +362,21 @@
 }
 END_TEST
 
-START_TEST(pkg_freebsd_object_uint_max)
+START_TEST(facund_object_uint_max)
 {
 	/* Test accessing an object set to 4294967295 will succeed */
 	test_object_assign(uint, "unsigned int", UINT32_MAX, "4294967295");
 }
 END_TEST
 
-START_TEST(pkg_freebsd_object_uint_max_from_str)
+START_TEST(facund_object_uint_max_from_str)
 {
 	test_object_assign_from_string(uint, "unsigned int", UINT32_MAX,
 	    "4294967295", "4294967295");
 }
 END_TEST
 
-START_TEST(pkg_freebsd_object_uint_bad_max_from_str)
+START_TEST(facund_object_uint_bad_max_from_str)
 {
 	struct facund_object *obj;
 
@@ -395,7 +395,7 @@
 }
 END_TEST
 
-START_TEST(pkg_freebsd_object_uint_bad_from_str)
+START_TEST(facund_object_uint_bad_from_str)
 {
 	struct facund_object *obj;
 
@@ -414,7 +414,7 @@
 }
 END_TEST
 
-START_TEST(pkg_freebsd_object_uint_error)
+START_TEST(facund_object_uint_error)
 {
 	/* Test errors are set/reset correctly */
 	test_object_error(uint);
@@ -430,7 +430,7 @@
 /*
  * Tests for a string facund_object
  */
-START_TEST(pkg_freebsd_object_string_null)
+START_TEST(facund_object_string_null)
 {
 	/* Test if string functions will fail correctly when passes NULL */
 	fail_unless(facund_object_set_string(NULL, NULL) == -1, NULL);
@@ -439,7 +439,7 @@
 }
 END_TEST
 
-START_TEST(pkg_freebsd_object_string_create)
+START_TEST(facund_object_string_create)
 {
 	/* Test accessing an unassigned string will fail */
 	test_object_create(string, FACUND_STRING, 0);
@@ -460,46 +460,46 @@
 	s = suite_create("facund_object");
 
 	tc = tcase_create("boolean");
-	tcase_add_test(tc, pkg_freebsd_object_bool_null);
-	tcase_add_test(tc, pkg_freebsd_object_bool_create);
-	tcase_add_test(tc, pkg_freebsd_object_bool_true);
-	tcase_add_test(tc, pkg_freebsd_object_bool_false);
-	tcase_add_test(tc, pkg_freebsd_object_bool_true_from_str);
-	tcase_add_test(tc, pkg_freebsd_object_bool_false_from_str);
-	tcase_add_test(tc, pkg_freebsd_object_bool_error);
+	tcase_add_test(tc, facund_object_bool_null);
+	tcase_add_test(tc, facund_object_bool_create);
+	tcase_add_test(tc, facund_object_bool_true);
+	tcase_add_test(tc, facund_object_bool_false);
+	tcase_add_test(tc, facund_object_bool_true_from_str);
+	tcase_add_test(tc, facund_object_bool_false_from_str);
+	tcase_add_test(tc, facund_object_bool_error);
 	suite_add_tcase(s, tc);
 
 	tc = tcase_create("integer");
-	tcase_add_test(tc, pkg_freebsd_object_int_null);
-	tcase_add_test(tc, pkg_freebsd_object_int_create);
-	tcase_add_test(tc, pkg_freebsd_object_int_zero);
-	tcase_add_test(tc, pkg_freebsd_object_int_zero_from_str);
-	tcase_add_test(tc, pkg_freebsd_object_int_min);
-	tcase_add_test(tc, pkg_freebsd_object_int_min_from_str);
-	tcase_add_test(tc, pkg_freebsd_object_int_bad_min_from_str);
-	tcase_add_test(tc, pkg_freebsd_object_int_max);
-	tcase_add_test(tc, pkg_freebsd_object_int_max_from_str);
-	tcase_add_test(tc, pkg_freebsd_object_int_bad_max_from_str);
-	tcase_add_test(tc, pkg_freebsd_object_int_bad_from_str);
-	tcase_add_test(tc, pkg_freebsd_object_int_error);
+	tcase_add_test(tc, facund_object_int_null);
+	tcase_add_test(tc, facund_object_int_create);
+	tcase_add_test(tc, facund_object_int_zero);
+	tcase_add_test(tc, facund_object_int_zero_from_str);
+	tcase_add_test(tc, facund_object_int_min);
+	tcase_add_test(tc, facund_object_int_min_from_str);
+	tcase_add_test(tc, facund_object_int_bad_min_from_str);
+	tcase_add_test(tc, facund_object_int_max);
+	tcase_add_test(tc, facund_object_int_max_from_str);
+	tcase_add_test(tc, facund_object_int_bad_max_from_str);
+	tcase_add_test(tc, facund_object_int_bad_from_str);
+	tcase_add_test(tc, facund_object_int_error);
 	suite_add_tcase(s, tc);
 
 	tc = tcase_create("unsigned integer");
-	tcase_add_test(tc, pkg_freebsd_object_uint_null);
-	tcase_add_test(tc, pkg_freebsd_object_uint_create);
-	tcase_add_test(tc, pkg_freebsd_object_uint_min);
-	tcase_add_test(tc, pkg_freebsd_object_uint_min_from_str);
-	tcase_add_test(tc, pkg_freebsd_object_uint_bad_min_from_str);
-	tcase_add_test(tc, pkg_freebsd_object_uint_max);
-	tcase_add_test(tc, pkg_freebsd_object_uint_max_from_str);
-	tcase_add_test(tc, pkg_freebsd_object_uint_bad_max_from_str);
-	tcase_add_test(tc, pkg_freebsd_object_uint_bad_from_str);
-	tcase_add_test(tc, pkg_freebsd_object_uint_error);
+	tcase_add_test(tc, facund_object_uint_null);
+	tcase_add_test(tc, facund_object_uint_create);
+	tcase_add_test(tc, facund_object_uint_min);
+	tcase_add_test(tc, facund_object_uint_min_from_str);
+	tcase_add_test(tc, facund_object_uint_bad_min_from_str);
+	tcase_add_test(tc, facund_object_uint_max);
+	tcase_add_test(tc, facund_object_uint_max_from_str);
+	tcase_add_test(tc, facund_object_uint_bad_max_from_str);
+	tcase_add_test(tc, facund_object_uint_bad_from_str);
+	tcase_add_test(tc, facund_object_uint_error);
 	suite_add_tcase(s, tc);
 
 	tc = tcase_create("string");
-	tcase_add_test(tc, pkg_freebsd_object_string_null);
-	tcase_add_test(tc, pkg_freebsd_object_string_create);
+	tcase_add_test(tc, facund_object_string_null);
+	tcase_add_test(tc, facund_object_string_create);
 	suite_add_tcase(s, tc);
 
 	return s;

Added: trunk/lib/test/test_facund_response.c
===================================================================
--- trunk/lib/test/test_facund_response.c	2007-08-29 03:05:24 UTC (rev 10)
+++ trunk/lib/test/test_facund_response.c	2007-08-29 05:50:57 UTC (rev 11)
@@ -0,0 +1,124 @@
+/*
+ * Copyright (C) 2007 Andrew Turner
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ *
+ */
+
+#include "test.h"
+
+#include <facund_object.h>
+#include <facund_response.h>
+
+#include <string.h>
+
+START_TEST(facund_response_null)
+{
+	fail_unless(facund_response_new(NULL, RESP_GOOD, NULL, NULL) == NULL,
+	    NULL);
+	fail_unless(facund_response_new("id", RESP_GOOD, NULL, NULL) == NULL,
+	    NULL);
+}
+END_TEST
+
+START_TEST(facund_response_correct)
+{
+	struct facund_response *resp;
+
+	fail_unless((resp = facund_response_new("id", RESP_GOOD, "msg", NULL))
+	    != NULL, NULL);
+	fail_unless(strcmp(
+	    "<response id=\"id\" code=\"0\" message=\"msg\"></response>",
+	    facund_response_string(resp)) == 0, NULL);
+	facund_response_free(resp);
+}
+END_TEST
+
+START_TEST(facund_response_correct_data)
+{
+	struct facund_response *resp;
+	struct facund_object *obj;
+
+	fail_unless((obj = facund_object_new_bool()) != NULL, NULL);
+	facund_object_set_bool(obj, 0);
+
+	fail_unless((resp = facund_response_new("id", RESP_GOOD, "msg", obj))
+	    != NULL, NULL);
+	fail_unless(strcmp(
+	    "<response id=\"id\" code=\"0\" message=\"msg\">"
+	    "<data type=\"bool\">false</data></response>",
+	    facund_response_string(resp)) == 0, NULL);
+	facund_response_free(resp);
+}
+END_TEST
+
+START_TEST(facund_response_correct_no_id)
+{
+	struct facund_response *resp;
+
+	fail_unless((resp = facund_response_new(NULL, RESP_GOOD, "msg", NULL))
+	    != NULL, NULL);
+	fail_unless(strcmp(
+	    "<response code=\"0\" message=\"msg\"></response>",
+	    facund_response_string(resp)) == 0, NULL);
+	facund_response_free(resp);
+}
+END_TEST
+
+START_TEST(facund_response_correct_no_id_data)
+{
+	struct facund_response *resp;
+	struct facund_object *obj;
+
+	fail_unless((obj = facund_object_new_bool()) != NULL, NULL);
+	facund_object_set_bool(obj, 0);
+
+	fail_unless((resp = facund_response_new(NULL, RESP_GOOD, "msg", obj))
+	    != NULL, NULL);
+	fail_unless(strcmp(
+	    "<response code=\"0\" message=\"msg\">"
+	    "<data type=\"bool\">false</data></response>",
+	    facund_response_string(resp)) == 0, NULL);
+	facund_response_free(resp);
+}
+END_TEST
+
+Suite *
+facund_response_suite()
+{
+	Suite *s;
+	TCase *tc;
+
+	s = suite_create("facund_response");
+
+	tc = tcase_create("response");
+	tcase_add_test(tc, facund_response_null);
+	tcase_add_test(tc, facund_response_correct);
+	tcase_add_test(tc, facund_response_correct_data);
+	tcase_add_test(tc, facund_response_correct_no_id);
+	tcase_add_test(tc, facund_response_correct_no_id_data);
+	suite_add_tcase(s, tc);
+
+	return s;
+}
+



From zxombie at users.berlios.de  Wed Aug 29 07:53:52 2007
From: zxombie at users.berlios.de (zxombie at users.berlios.de)
Date: Wed, 29 Aug 2007 07:53:52 +0200
Subject: r12 - trunk/lib
Message-ID: <200708290553.l7T5rq44000629@sheep.berlios.de>

Author: zxombie
Date: 2007-08-29 07:53:46 +0200 (Wed, 29 Aug 2007)
New Revision: 12

Modified:
   trunk/lib/facund_response.c
   trunk/lib/facund_response.h
Log:
Remove facund_response_set_id as it was unused 
Fix facund_response_new when no id is set


Modified: trunk/lib/facund_response.c
===================================================================
--- trunk/lib/facund_response.c	2007-08-29 05:50:57 UTC (rev 11)
+++ trunk/lib/facund_response.c	2007-08-29 05:53:46 UTC (rev 12)
@@ -53,6 +53,10 @@
 {
 	struct facund_response *resp;
 
+	if (message == NULL) {
+		return NULL;
+	}
+
 	resp = calloc(1, sizeof(struct facund_response));
 	if (resp == NULL)
 		return NULL;
@@ -63,7 +67,7 @@
 	resp->resp_code = code;
 	resp->resp_msg = strdup(message);
 	resp->resp_return = obj;
-	if (resp->resp_id == NULL || resp->resp_msg == NULL) {
+	if ((id != NULL && resp->resp_id == NULL) || resp->resp_msg == NULL) {
 		facund_response_free(resp);
 		return NULL;
 	}
@@ -71,16 +75,6 @@
 	return resp;
 }
 
-int
-facund_response_set_id(struct facund_response *resp, const char *id)
-{
-	if (resp == NULL || id == NULL) {
-		return -1;
-	}
-
-	return -1;
-}
-
 /*
  * Gets a string to send to the client
  */

Modified: trunk/lib/facund_response.h
===================================================================
--- trunk/lib/facund_response.h	2007-08-29 05:50:57 UTC (rev 11)
+++ trunk/lib/facund_response.h	2007-08-29 05:53:46 UTC (rev 12)
@@ -51,8 +51,6 @@
 
 struct facund_response	*facund_response_new(const char *, facund_response_code,
 			    const char *, struct facund_object *);
-int			 facund_response_set_id(struct facund_response *,
-			    const char *);
 const char		*facund_response_string(struct facund_response *);
 void			 facund_response_free(struct facund_response *);
 



